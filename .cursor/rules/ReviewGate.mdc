---
description:
globs:
alwaysApply: true
---
## AI Agent 协议：自包含强制交互式最终审查循环 + 自动脚本创建（版本 3）

---

### **0. 用户须知与安全提示**

这是一个高级的、实验性的规则。它指示 AI Agent 检查、可能创建、然后执行一个 Python 脚本（`final_review_gate.py`）以启动交互式审查循环。
使用此规则表示您知晓 AI 将尝试进行文件系统操作（读取、写入、执行）。请确保 AI 的执行环境具有适当权限，并注意相关的安全风险。

---

### **1. 核心原则与上下文**

你必须在完成用户的主任务后，进入一个**强制性的最终交互审查阶段**，此阶段由一个指定的 Python 脚本 `final_review_gate.py` 驱动。
你**不能将任务标记为完成**，除非该脚本明确表示任务已完成。此流程依赖你在聊天窗口中运行终端命令并读取输出的能力。

---

## 阶段 0：确保 `final_review_gate.py` 脚本存在

此阶段在每次用户触发任务时执行一次，如果脚本缺失或内容不正确也将再次执行。

---

### 1. **定义脚本详情**

* **脚本名：** `final_review_gate.py`

* **存放位置：** 当前项目根目录

* **Python 脚本内容如下（你必须严格使用此内容）：**

```python
# final_review_gate.py
import sys
import os

if __name__ == "__main__":
    # 尝试将标准输出设置为非缓冲模式，以实现更灵敏的交互。
    # 这在某些平台或非终端环境中可能无效，但推荐这样做。
    try:
        sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', buffering=1)
    except Exception:
        pass  # 如果失败（例如在某些环境下），则忽略

    try:
        sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', buffering=1)
    except Exception:
        pass  # 同上

    print("--- 最终审查入口已激活 ---", flush=True)
    print("AI 已完成主要任务，正在等待你的审查或补充指令。", flush=True)
    print("请输入补充指令，或者输入以下任一关键词表示完成：'TASK_COMPLETE', 'Done', 'Quit', 'q'", flush=True)

    active_session = True
    while active_session:
        try:
            # 显示脚本已准备好接收输入。
            print("REVIEW_GATE_AWAITING_INPUT:", end="", flush=True)

            line = sys.stdin.readline()

            if not line:  # 文件结束（EOF）
                print("--- 审查入口：输入通道关闭（EOF），退出脚本 ---", flush=True)
                active_session = False
                break

            user_input = line.strip()

            # 判断退出条件
            if user_input.upper() in ['TASK_COMPLETE', 'DONE', 'QUIT', 'Q']:
                print(f"--- 审查入口：用户通过 '{user_input.upper()}' 表示任务完成 ---", flush=True)
                active_session = False
                break
            elif user_input:
                # AI 将“监听”以下格式的输出
                print(f"USER_REVIEW_SUB_PROMPT: {user_input}", flush=True)
            # 如果用户输入为空但不是退出命令，则继续循环等待
        except KeyboardInterrupt:
            print("--- 审查入口：用户中断会话（Ctrl+C） ---", flush=True)
            active_session = False
            break
        except Exception as e:
            print(f"--- 审查入口脚本错误：{e} ---", flush=True)
            active_session = False
            break

    print("--- 最终审查脚本已退出 ---", flush=True)
```

---

### 2. **确保脚本存在且内容正确**

* 检查项目根目录下是否存在 `final_review_gate.py` 文件；

* **如果文件不存在或内容与上述不一致**：

  * 必须创建或覆盖 `final_review_gate.py`；
  * 内容必须完全与上面的一致（包括空格、注释、格式）；
  * 创建或更新后，显示提示：
    **“`final_review_gate.py` 脚本已创建或更新，具备最新的交互增强特性。”**

* 如果文件存在且内容正确，可以跳过提示。

* 如果读取或写入脚本时出现错误（如权限问题），必须提示如下：
  **“管理 `final_review_gate.py` 时出错：\[具体错误]。无法继续执行交互审查。”**
  然后尽可能完成主任务，但无需执行交互审查。

---

## 阶段 1：主任务执行

1. **按正常流程完成用户任务。**

   * **运行完整应用程序前必须征求用户许可。**

     * 例如：“我即将运行 \[应用程序名称/命令]，是否可以继续？或它已经在运行？”
     * 无需为测试、构建、静态检查等执行确认。
   * 如果用户否决运行请求，调整策略继续完成任务。

2. 在这个阶段可根据终端输出进行调试和修正。

---

## 阶段 2：强制运行最终审查脚本

1. **过渡时机：**
   你完成主任务后，不要结束会话！进入此阶段。

2. **执行脚本：**

   * 在项目根目录运行 `final_review_gate.py`；

   * 尝试命令顺序为：

     * `python ./final_review_gate.py`
     * 若失败，尝试 `python3 ./final_review_gate.py`

   * **此脚本必须在聊天窗口内以终端形式运行，输出必须实时可见。**

3. **提示语：**
   明确告诉用户：

   > “我已完成主任务，现在启动强制的最终交互审查，正在运行 `./final_review_gate.py`。审查终端已在**此聊天窗口中激活，输出将实时显示**。
   > 请输入补充指令，或输入 'TASK\_COMPLETE'、'Done'、'Quit'、'q' 表示任务完成。”

---

## 阶段 3：交互审查循环

1. **实时监控终端输出。**
   用户将在终端中看到提示符：`REVIEW_GATE_AWAITING_INPUT:`
   AI 会读取脚本输出，持续监听。

2. **检测用户补充指令格式：**

   当输出行出现如下格式：
   `USER_REVIEW_SUB_PROMPT: <用户补充的指令>`
   AI 必须立即解析并执行该指令。

3. **处理补充指令：**

   * 这是对原始任务的补充；
   * 分析、执行并回复处理结果；
   * 之后继续监听下一个指令，直到用户输入退出命令。

4. **完成标志：**
   当输出中出现以下任意内容时，AI 才可结束任务：

   * `--- 审查入口: 用户通过输入 'TASK_COMPLETE' 表示任务已完成 ---`
   * `--- 最终审查脚本已退出 ---`
   * 或任何退出相关的报错信息，如：

     * `审查入口：用户中断会话`
     * `审查入口脚本错误: ...`

---

## 阶段 4：任务真正完成

1. **只有当脚本完全退出且在聊天窗口中输出结束标志后，AI 才能认为任务完成。**

2. 最后，提供从任务开始到交互审查的总结。

---

## 强制规则说明：

以上交互式审查流程（阶段 0、2、3、4）**为强制性步骤**，覆盖所有默认行为。
你**不得跳过审查流程或自行认为任务已完成**，只有用户通过脚本明确表示完成，任务才算正式结束。
